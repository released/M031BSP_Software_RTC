; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\heap_sort.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\heap_sort.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\heap_sort.crf ..\heap_sort.c]
                          THUMB

                          AREA ||i.BubbleSort||, CODE, READONLY, ALIGN=1

                  BubbleSort PROC
;;;4      
;;;5      void BubbleSort(int tab[], int length)
000000  b5f0              PUSH     {r4-r7,lr}
;;;6      {
000002  1e49              SUBS     r1,r1,#1
                  |L1.4|
;;;7      	int l=0x00, exchange =0x01; 
;;;8      	int tmp=0x00;
;;;9      
;;;10     	/* Sort tab */
;;;11     	while(exchange==1) 
;;;12     	{ 
;;;13     		exchange=0; 
000004  2500              MOVS     r5,#0
;;;14     		for(l=0; l<length-1; l++) 
000006  462a              MOV      r2,r5
000008  e009              B        |L1.30|
                  |L1.10|
;;;15     		{
;;;16     			if ( tab[l] > tab[l+1] ) 
00000a  0096              LSLS     r6,r2,#2
00000c  1837              ADDS     r7,r6,r0
00000e  5983              LDR      r3,[r0,r6]
000010  687c              LDR      r4,[r7,#4]
000012  42a3              CMP      r3,r4
000014  dd02              BLE      |L1.28|
;;;17     			{ 
;;;18     				tmp = tab[l]; 
;;;19     				tab[l] = tab[l+1]; 
000016  5184              STR      r4,[r0,r6]
;;;20     				tab[l+1] = tmp; 
;;;21     				exchange=1; 
000018  2501              MOVS     r5,#1
00001a  607b              STR      r3,[r7,#4]
                  |L1.28|
00001c  1c52              ADDS     r2,r2,#1
                  |L1.30|
00001e  428a              CMP      r2,r1                 ;14
000020  dbf3              BLT      |L1.10|
000022  2d01              CMP      r5,#1                 ;11
000024  d0ee              BEQ      |L1.4|
;;;22     			}
;;;23     		}
;;;24     	} 
;;;25     }
000026  bdf0              POP      {r4-r7,pc}
;;;26     
                          ENDP


                          AREA ||i.HeapSort||, CODE, READONLY, ALIGN=1

                  HeapSort PROC
;;;129    
;;;130    void HeapSort(item_type s[], int n)
000000  b570              PUSH     {r4-r6,lr}
;;;131    {
000002  460d              MOV      r5,r1
;;;132        int i; // counters
;;;133        priority_queue q; // heap for heapsort
;;;134    
;;;135        make_heap(&q, s, n);
000004  460a              MOV      r2,r1
000006  b0b4              SUB      sp,sp,#0xd0           ;131
000008  4606              MOV      r6,r0                 ;131
00000a  4601              MOV      r1,r0
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       make_heap
;;;136    
;;;137        for (i = 0; i < n; ++i) {
000012  2400              MOVS     r4,#0
000014  e005              B        |L2.34|
                  |L2.22|
;;;138            s[i] = extract_min(&q);
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       extract_min
00001c  00a1              LSLS     r1,r4,#2
00001e  5070              STR      r0,[r6,r1]
000020  1c64              ADDS     r4,r4,#1
                  |L2.34|
000022  42ac              CMP      r4,r5                 ;137
000024  dbf7              BLT      |L2.22|
;;;139        }
;;;140    }
000026  b034              ADD      sp,sp,#0xd0
000028  bd70              POP      {r4-r6,pc}
;;;141    
                          ENDP


                          AREA ||i.bubble_down||, CODE, READONLY, ALIGN=1

                  bubble_down PROC
;;;63     
;;;64     void bubble_down(priority_queue *q, int p)
000000  b5f0              PUSH     {r4-r7,lr}
;;;65     {
000002  4605              MOV      r5,r0
000004  004f              LSLS     r7,r1,#1
;;;66         int c; // child index
;;;67         int i; // counter
;;;68         int min_index; // index of lightest child
;;;69     
;;;70         c = pq_young_child(p);
;;;71         min_index = p;
;;;72     
;;;73         for (i = 0; i <= 1; ++i) {
000006  2300              MOVS     r3,#0
;;;74             if ((c+i) <= q->n) {
000008  3080              ADDS     r0,r0,#0x80
00000a  6cc0              LDR      r0,[r0,#0x4c]
00000c  460c              MOV      r4,r1                 ;71
00000e  4684              MOV      r12,r0
                  |L3.16|
000010  18f8              ADDS     r0,r7,r3
000012  4560              CMP      r0,r12
000014  dc06              BGT      |L3.36|
;;;75                 if (q->q[min_index] > q->q[c+i]) {
000016  00a2              LSLS     r2,r4,#2
000018  0086              LSLS     r6,r0,#2
00001a  58aa              LDR      r2,[r5,r2]
00001c  59ae              LDR      r6,[r5,r6]
00001e  42b2              CMP      r2,r6
000020  dd00              BLE      |L3.36|
;;;76                     min_index = c+i;
000022  4604              MOV      r4,r0
                  |L3.36|
000024  1c5b              ADDS     r3,r3,#1
000026  2b01              CMP      r3,#1                 ;73
000028  ddf2              BLE      |L3.16|
;;;77                 }
;;;78             }
;;;79         }
;;;80     
;;;81         if (min_index != p) {
00002a  428c              CMP      r4,r1
00002c  d007              BEQ      |L3.62|
;;;82             pq_swap(q, p, min_index);
00002e  4622              MOV      r2,r4
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       pq_swap
;;;83             bubble_down(q, min_index);
000036  4621              MOV      r1,r4
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       bubble_down
                  |L3.62|
;;;84         }
;;;85     }
00003e  bdf0              POP      {r4-r7,pc}
;;;86     
                          ENDP


                          AREA ||i.bubble_up||, CODE, READONLY, ALIGN=1

                  bubble_up PROC
;;;50     
;;;51     void bubble_up(priority_queue *q, int p)
000000  b530              PUSH     {r4,r5,lr}
;;;52     {
000002  4604              MOV      r4,r0
                  |L4.4|
000004  460d              MOV      r5,r1
;;;53         if (pq_parent(p) == -1) {
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       pq_parent
00000c  1c40              ADDS     r0,r0,#1
00000e  d015              BEQ      |L4.60|
;;;54             return; // root of heap, no parent
;;;55         }
;;;56     
;;;57         if (q->q[pq_parent(p)] > q->q[p] ) {
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       pq_parent
000016  0080              LSLS     r0,r0,#2
000018  00a9              LSLS     r1,r5,#2
00001a  5820              LDR      r0,[r4,r0]
00001c  5861              LDR      r1,[r4,r1]
00001e  4288              CMP      r0,r1
000020  dd0c              BLE      |L4.60|
;;;58             pq_swap(q, p, pq_parent(p));
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       pq_parent
000028  4602              MOV      r2,r0
00002a  4629              MOV      r1,r5
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       pq_swap
;;;59             bubble_up(q, pq_parent(p));
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       pq_parent
000038  4601              MOV      r1,r0
00003a  e7e3              B        |L4.4|
                  |L4.60|
;;;60         }
;;;61     }
00003c  bd30              POP      {r4,r5,pc}
;;;62     
                          ENDP


                          AREA ||i.extract_min||, CODE, READONLY, ALIGN=2

                  extract_min PROC
;;;86     
;;;87     item_type extract_min(priority_queue *q)
000000  b510              PUSH     {r4,lr}
;;;88     {
;;;89         int min = -1; // minimum value
;;;90     
;;;91         if (q->n <= 0) {
000002  4601              MOV      r1,r0
000004  3180              ADDS     r1,r1,#0x80
000006  460a              MOV      r2,r1
000008  2400              MOVS     r4,#0                 ;89
00000a  6cc9              LDR      r1,[r1,#0x4c]
00000c  43e4              MVNS     r4,r4                 ;89
00000e  2900              CMP      r1,#0
000010  dc03              BGT      |L5.26|
;;;92             printf("Warning: empty priority queue.\n");
000012  a007              ADR      r0,|L5.48|
000014  f7fffffe          BL       __2printf
000018  e008              B        |L5.44|
                  |L5.26|
;;;93         } else {
;;;94             min = q->q[1]; // min heap, so minimum value is at the root
;;;95     
;;;96             q->q[1] = q->q[ q->n ];
00001a  008b              LSLS     r3,r1,#2
00001c  58c3              LDR      r3,[r0,r3]
00001e  6844              LDR      r4,[r0,#4]
000020  1e49              SUBS     r1,r1,#1
;;;97             q->n = q->n - 1;
000022  6043              STR      r3,[r0,#4]
;;;98             bubble_down(q, 1);
000024  64d1              STR      r1,[r2,#0x4c]
000026  2101              MOVS     r1,#1
000028  f7fffffe          BL       bubble_down
                  |L5.44|
;;;99         }
;;;100    
;;;101        return min;
00002c  4620              MOV      r0,r4
;;;102    }
00002e  bd10              POP      {r4,pc}
;;;103    
                          ENDP

                  |L5.48|
000030  5761726e          DCB      "Warning: empty priority queue.\n",0
000034  696e673a
000038  20656d70
00003c  74792070
000040  72696f72
000044  69747920
000048  71756575
00004c  652e0a00

                          AREA ||i.make_heap||, CODE, READONLY, ALIGN=1

                  make_heap PROC
;;;120    
;;;121    void make_heap(priority_queue *q, item_type s[], int n)
000000  b5f8              PUSH     {r3-r7,lr}
;;;122    {
000002  460e              MOV      r6,r1
000004  2100              MOVS     r1,#0
000006  4607              MOV      r7,r0
000008  3080              ADDS     r0,r0,#0x80
00000a  4615              MOV      r5,r2
;;;123        int i; // counter
;;;124        pq_init(q);
;;;125        for (i = 0; i < n; ++i) {
00000c  460c              MOV      r4,r1
00000e  64c1              STR      r1,[r0,#0x4c]         ;122
000010  e005              B        |L6.30|
                  |L6.18|
;;;126            pq_insert(q, s[i]);
000012  00a0              LSLS     r0,r4,#2
000014  5831              LDR      r1,[r6,r0]
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       pq_insert
00001c  1c64              ADDS     r4,r4,#1
                  |L6.30|
00001e  42ac              CMP      r4,r5                 ;125
000020  dbf7              BLT      |L6.18|
;;;127        }
;;;128    }
000022  bdf8              POP      {r3-r7,pc}
;;;129    
                          ENDP


                          AREA ||i.pq_init||, CODE, READONLY, ALIGN=1

                  pq_init PROC
;;;103    
;;;104    void pq_init(priority_queue *q)
000000  2100              MOVS     r1,#0
;;;105    {
;;;106    	q->n = 0;
000002  3080              ADDS     r0,r0,#0x80
000004  64c1              STR      r1,[r0,#0x4c]
;;;107    }
000006  4770              BX       lr
;;;108    
                          ENDP


                          AREA ||i.pq_insert||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  pq_insert PROC
;;;108    
;;;109    void pq_insert(priority_queue *q, item_type x)
000000  b510              PUSH     {r4,lr}
;;;110    {
;;;111        if (q->n >= PQ_SIZE) {
000002  4602              MOV      r2,r0
000004  3280              ADDS     r2,r2,#0x80
000006  6cd3              LDR      r3,[r2,#0x4c]
000008  2b32              CMP      r3,#0x32
00000a  db03              BLT      |L8.20|
;;;112            printf("Warning: priority queue overflow insert x=%d\n", x);
00000c  a005              ADR      r0,|L8.36|
00000e  f7fffffe          BL       __2printf
;;;113        } else {
;;;114            q->n = (q->n) + 1;
;;;115            q->q[ q->n ] = x;
;;;116            bubble_up(q, q->n);
;;;117        }
;;;118    }
000012  bd10              POP      {r4,pc}
                  |L8.20|
000014  1c5b              ADDS     r3,r3,#1
000016  64d3              STR      r3,[r2,#0x4c]         ;115
000018  009b              LSLS     r3,r3,#2              ;115
00001a  50c1              STR      r1,[r0,r3]            ;115
00001c  6cd1              LDR      r1,[r2,#0x4c]         ;116
00001e  f7fffffe          BL       bubble_up
000022  bd10              POP      {r4,pc}
;;;119    
                          ENDP

                  |L8.36|
000024  5761726e          DCB      "Warning: priority queue overflow insert x=%d\n",0
000028  696e673a
00002c  20707269
000030  6f726974
000034  79207175
000038  65756520
00003c  6f766572
000040  666c6f77
000044  20696e73
000048  65727420
00004c  783d2564
000050  0a00    
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.pq_parent||, CODE, READONLY, ALIGN=1

                  pq_parent PROC
;;;34     
;;;35     int pq_parent(int n)
000000  2801              CMP      r0,#1
;;;36     {
000002  d003              BEQ      |L9.12|
;;;37         if (n == 1) {
;;;38             // 0 == root
;;;39             return -1;
;;;40         } else {
;;;41             return ((int) n / 2); // implicitly take floor (n/2)
000004  0fc1              LSRS     r1,r0,#31
000006  1808              ADDS     r0,r1,r0
000008  1040              ASRS     r0,r0,#1
;;;42         }
;;;43     }
00000a  4770              BX       lr
                  |L9.12|
00000c  2000              MOVS     r0,#0                 ;39
00000e  43c0              MVNS     r0,r0                 ;39
000010  4770              BX       lr
;;;44     
                          ENDP


                          AREA ||i.pq_swap||, CODE, READONLY, ALIGN=1

                  pq_swap PROC
;;;27     
;;;28     void pq_swap(priority_queue *q, int child, int parent) 
000000  b510              PUSH     {r4,lr}
;;;29     {
;;;30         item_type temp = q->q[ child ];
000002  0089              LSLS     r1,r1,#2
;;;31         q->q[ child ] = q->q[ parent ];
000004  0092              LSLS     r2,r2,#2
000006  5843              LDR      r3,[r0,r1]            ;30
000008  5884              LDR      r4,[r0,r2]
00000a  5044              STR      r4,[r0,r1]
;;;32         q->q[ parent ] = temp;
00000c  5083              STR      r3,[r0,r2]
;;;33     }
00000e  bd10              POP      {r4,pc}
;;;34     
                          ENDP


                          AREA ||i.pq_young_child||, CODE, READONLY, ALIGN=1

                  pq_young_child PROC
;;;44     
;;;45     int pq_young_child(int n)
000000  0040              LSLS     r0,r0,#1
;;;46     {
;;;47     	return(2 * n);
;;;48     }
000002  4770              BX       lr
;;;49     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\heap_sort.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_heap_sort_c_b3a07667____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_heap_sort_c_b3a07667____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_heap_sort_c_b3a07667____REVSH|
#line 402
|__asm___11_heap_sort_c_b3a07667____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
