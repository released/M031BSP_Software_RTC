; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;172    
;;;173    void GPIO_Init (void)
000000  b510              PUSH     {r4,lr}
;;;174    {
;;;175        GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000002  2201              MOVS     r2,#1
000004  0391              LSLS     r1,r2,#14
000006  4802              LDR      r0,|L1.16|
000008  f7fffffe          BL       GPIO_SetMode
;;;176    }
00000c  bd10              POP      {r4,pc}
;;;177    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40004040

                          AREA ||i.RTC_Process||, CODE, READONLY, ALIGN=1

                  RTC_Process PROC
;;;119    
;;;120    void RTC_Process(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122    	SoftwareRTC();
000002  f7fffffe          BL       SoftwareRTC
;;;123    	SoftwareYMD();
000006  f7fffffe          BL       SoftwareYMD
;;;124    }
00000a  bd10              POP      {r4,pc}
;;;125    
                          ENDP


                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;259    
;;;260    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  4c1e              LDR      r4,|L3.128|
000006  2216              MOVS     r2,#0x16
000008  2188              MOVS     r1,#0x88
                  |L3.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6022              STR      r2,[r4,#0]
00000e  6021              STR      r1,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L3.10|
;;;261    {
;;;262        /* Unlock protected registers */
;;;263        SYS_UnlockReg();
;;;264    
;;;265        /* Enable HIRC clock (Internal RC 48MHz) */
;;;266        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;267    //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;268    	
;;;269        /* Wait for HIRC clock ready */
;;;270        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;271    //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;272    	
;;;273        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;274        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;275    
;;;276        /* Enable UART0 clock */
;;;277        CLK_EnableModuleClock(UART0_MODULE);
00002a  4d16              LDR      r5,|L3.132|
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       CLK_EnableModuleClock
;;;278        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_PCLK0, CLK_CLKDIV0_UART0(1));
000032  2101              MOVS     r1,#1
000034  2200              MOVS     r2,#0
000036  0689              LSLS     r1,r1,#26
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       CLK_SetModuleClock
;;;279    
;;;280        CLK_EnableModuleClock(TMR2_MODULE);
00003e  4d12              LDR      r5,|L3.136|
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       CLK_EnableModuleClock
;;;281        CLK_SetModuleClock(TMR2_MODULE, CLK_CLKSEL1_TMR2SEL_PCLK1, 0);
000046  2200              MOVS     r2,#0
000048  03e9              LSLS     r1,r5,#15
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       CLK_SetModuleClock
;;;282    	
;;;283        CLK_EnableModuleClock(TMR3_MODULE);
000050  4d0e              LDR      r5,|L3.140|
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       CLK_EnableModuleClock
;;;284        CLK_SetModuleClock(TMR3_MODULE, CLK_CLKSEL1_TMR3SEL_PCLK1, 0);
000058  2101              MOVS     r1,#1
00005a  2200              MOVS     r2,#0
00005c  0549              LSLS     r1,r1,#21
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       CLK_SetModuleClock
;;;285    
;;;286    
;;;287        /* Update System Core Clock */
;;;288        SystemCoreClockUpdate();
000064  f7fffffe          BL       SystemCoreClockUpdate
;;;289    
;;;290    	/*----------------------------------------------------*/
;;;291        /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;292        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk))    |       \
000068  07a8              LSLS     r0,r5,#30
00006a  6bc1              LDR      r1,[r0,#0x3c]
00006c  22ff              MOVS     r2,#0xff
00006e  0412              LSLS     r2,r2,#16
000070  4391              BICS     r1,r1,r2
000072  2233              MOVS     r2,#0x33
000074  0452              LSLS     r2,r2,#17
000076  1889              ADDS     r1,r1,r2
000078  63c1              STR      r1,[r0,#0x3c]
00007a  2000              MOVS     r0,#0
00007c  6020              STR      r0,[r4,#0]
;;;293                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;294    
;;;295    
;;;296        /* Lock protected registers */
;;;297        SYS_LockReg();
;;;298    }
00007e  bd70              POP      {r4-r6,pc}
;;;299    
                          ENDP

                  |L3.128|
                          DCD      0x40000100
                  |L3.132|
                          DCD      0x5f803d10
                  |L3.136|
                          DCD      0x5f000004
                  |L3.140|
                          DCD      0x5f400005

                          AREA ||i.SoftwareRTC||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SoftwareRTC PROC
;;;69     
;;;70     void SoftwareRTC(void)
000000  b510              PUSH     {r4,lr}
;;;71     {
;;;72     	if (!is_flag_set(flag_RTC))	//(flag_RTC==0)
000002  4c15              LDR      r4,|L4.88|
000004  7820              LDRB     r0,[r4,#0]  ; BitFlag
000006  0680              LSLS     r0,r0,#26
000008  d525              BPL      |L4.86|
;;;73     		return;
;;;74     	sec++;
00000a  79a0              LDRB     r0,[r4,#6]  ; sec
00000c  2100              MOVS     r1,#0
00000e  1c40              ADDS     r0,r0,#1
000010  b2c0              UXTB     r0,r0
000012  71a0              STRB     r0,[r4,#6]
;;;75     	if(sec==60)
000014  283c              CMP      r0,#0x3c
000016  d103              BNE      |L4.32|
;;;76     	{
;;;77     		sec=0;			
000018  71a1              STRB     r1,[r4,#6]
;;;78     		min++;			
00001a  7960              LDRB     r0,[r4,#5]  ; min
00001c  1c40              ADDS     r0,r0,#1
00001e  7160              STRB     r0,[r4,#5]
                  |L4.32|
;;;79     	}
;;;80     	if(min==60)
000020  7960              LDRB     r0,[r4,#5]  ; min
000022  283c              CMP      r0,#0x3c
000024  d103              BNE      |L4.46|
;;;81     	{
;;;82     		min=0;
000026  7161              STRB     r1,[r4,#5]
;;;83     		hour++;			
000028  7920              LDRB     r0,[r4,#4]  ; hour
00002a  1c40              ADDS     r0,r0,#1
00002c  7120              STRB     r0,[r4,#4]
                  |L4.46|
;;;84     	}
;;;85     	if(hour==24)
00002e  7920              LDRB     r0,[r4,#4]  ; hour
000030  2818              CMP      r0,#0x18
000032  d106              BNE      |L4.66|
;;;86     	{
;;;87     		hour=0;
000034  7121              STRB     r1,[r4,#4]
;;;88     		g_day++;
000036  78a0              LDRB     r0,[r4,#2]  ; g_day
000038  1c40              ADDS     r0,r0,#1
00003a  70a0              STRB     r0,[r4,#2]
;;;89     		g_weekly++;
00003c  78e0              LDRB     r0,[r4,#3]  ; g_weekly
00003e  1c40              ADDS     r0,r0,#1
000040  70e0              STRB     r0,[r4,#3]
                  |L4.66|
;;;90     	}
;;;91     	printf("hr.:%d :min: %d: sec: %d\n\r",hour,min,sec);
000042  79a3              LDRB     r3,[r4,#6]  ; sec
000044  7962              LDRB     r2,[r4,#5]  ; min
000046  7921              LDRB     r1,[r4,#4]  ; hour
000048  a004              ADR      r0,|L4.92|
00004a  f7fffffe          BL       __2printf
;;;92     	set_flag(flag_RTC,DISABLE);//flag_RTC=0;
00004e  7820              LDRB     r0,[r4,#0]  ; BitFlag
000050  21df              MOVS     r1,#0xdf
000052  4008              ANDS     r0,r0,r1
000054  7020              STRB     r0,[r4,#0]
                  |L4.86|
;;;93     }
000056  bd10              POP      {r4,pc}
;;;94     
                          ENDP

                  |L4.88|
                          DCD      ||.data||
                  |L4.92|
00005c  68722e3a          DCB      "hr.:%d :min: %d: sec: %d\n\r",0
000060  2564203a
000064  6d696e3a
000068  2025643a
00006c  20736563
000070  3a202564
000074  0a0d00  
000077  00                DCB      0

                          AREA ||i.SoftwareYMD||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SoftwareYMD PROC
;;;94     
;;;95     void SoftwareYMD(void)
000000  b510              PUSH     {r4,lr}
;;;96     {	
000002  b08e              SUB      sp,sp,#0x38
;;;97     	int days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
000004  2230              MOVS     r2,#0x30
000006  4918              LDR      r1,|L5.104|
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;98     	days[1] += isLeapYear(g_year);
00000e  4c17              LDR      r4,|L5.108|
000010  68e0              LDR      r0,[r4,#0xc]  ; g_year
000012  f7fffffe          BL       isLeapYear
000016  9902              LDR      r1,[sp,#8]
000018  1840              ADDS     r0,r0,r1
;;;99     	if(g_day==g_day_old)
00001a  9002              STR      r0,[sp,#8]
00001c  78a0              LDRB     r0,[r4,#2]  ; g_day
00001e  79e1              LDRB     r1,[r4,#7]  ; g_day_old
000020  4288              CMP      r0,r1
000022  d01f              BEQ      |L5.100|
;;;100    		return;
;;;101    	g_day_old=g_day;
000024  71e0              STRB     r0,[r4,#7]
;;;102    	if(g_day>days[g_month-1])
000026  7861              LDRB     r1,[r4,#1]  ; g_month
000028  ab01              ADD      r3,sp,#4
00002a  008a              LSLS     r2,r1,#2
00002c  18d2              ADDS     r2,r2,r3
00002e  3a80              SUBS     r2,r2,#0x80
;;;103    	{
;;;104    		g_day=1;
000030  6fd3              LDR      r3,[r2,#0x7c]
000032  2201              MOVS     r2,#1
000034  4283              CMP      r3,r0                 ;102
000036  da02              BGE      |L5.62|
000038  70a2              STRB     r2,[r4,#2]
00003a  1c49              ADDS     r1,r1,#1
;;;105    		g_month++;
00003c  7061              STRB     r1,[r4,#1]
                  |L5.62|
;;;106    
;;;107    	}
;;;108    
;;;109    	if(g_weekly>7)//7 is sum day
00003e  78e0              LDRB     r0,[r4,#3]  ; g_weekly
000040  2807              CMP      r0,#7
000042  d900              BLS      |L5.70|
;;;110    		g_weekly=1;
000044  70e2              STRB     r2,[r4,#3]
                  |L5.70|
;;;111    
;;;112    	if(g_month>12)
000046  b2c8              UXTB     r0,r1
000048  280c              CMP      r0,#0xc
00004a  d903              BLS      |L5.84|
;;;113    	{
;;;114    		g_month=1;
00004c  7062              STRB     r2,[r4,#1]
;;;115    		g_year++;
00004e  68e0              LDR      r0,[r4,#0xc]  ; g_year
000050  1c40              ADDS     r0,r0,#1
000052  60e0              STR      r0,[r4,#0xc]  ; g_year
                  |L5.84|
;;;116    	}
;;;117    	printf("Y:%d, M:%d, D:%d, Weekly:%d\n\r",g_year,g_month,g_day,g_weekly);
000054  78e0              LDRB     r0,[r4,#3]  ; g_weekly
000056  9000              STR      r0,[sp,#0]
000058  78a3              LDRB     r3,[r4,#2]  ; g_day
00005a  7862              LDRB     r2,[r4,#1]  ; g_month
00005c  a004              ADR      r0,|L5.112|
00005e  68e1              LDR      r1,[r4,#0xc]  ; g_year
000060  f7fffffe          BL       __2printf
                  |L5.100|
;;;118    }
000064  b00e              ADD      sp,sp,#0x38
000066  bd10              POP      {r4,pc}
;;;119    
                          ENDP

                  |L5.104|
                          DCD      ||.constdata||
                  |L5.108|
                          DCD      ||.data||
                  |L5.112|
000070  593a2564          DCB      "Y:%d, M:%d, D:%d, Weekly:%d\n\r",0
000074  2c204d3a
000078  25642c20
00007c  443a2564
000080  2c205765
000084  656b6c79
000088  3a25640a
00008c  0d00    
00008e  00                DCB      0
00008f  00                DCB      0

                          AREA ||i.TIMER2_Init||, CODE, READONLY, ALIGN=2

                  TIMER2_Init PROC
;;;208    
;;;209    void TIMER2_Init(void)
000000  b510              PUSH     {r4,lr}
;;;210    {
;;;211        TIMER_Open(TIMER2, TIMER_PERIODIC_MODE, 1);
000002  4c09              LDR      r4,|L6.40|
000004  2201              MOVS     r2,#1
000006  06d1              LSLS     r1,r2,#27
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       TIMER_Open
00000e  6820              LDR      r0,[r4,#0]
000010  0461              LSLS     r1,r4,#17
000012  4308              ORRS     r0,r0,r1
000014  6020              STR      r0,[r4,#0]
000016  14c8              ASRS     r0,r1,#19
000018  4904              LDR      r1,|L6.44|
00001a  6008              STR      r0,[r1,#0]
00001c  6820              LDR      r0,[r4,#0]
00001e  0589              LSLS     r1,r1,#22
000020  4308              ORRS     r0,r0,r1
000022  6020              STR      r0,[r4,#0]
;;;212        TIMER_EnableInt(TIMER2);
;;;213        NVIC_EnableIRQ(TMR2_IRQn);	
;;;214        TIMER_Start(TIMER2);
;;;215    }
000024  bd10              POP      {r4,pc}
;;;216    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      0x40051000
                  |L6.44|
                          DCD      0xe000e100

                          AREA ||i.TIMER3_Init||, CODE, READONLY, ALIGN=2

                  TIMER3_Init PROC
;;;191    
;;;192    void TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;193    {
;;;194        TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L7.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1488              ASRS     r0,r1,#18
00001c  4904              LDR      r1,|L7.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;195        TIMER_EnableInt(TIMER3);
;;;196        NVIC_EnableIRQ(TMR3_IRQn);	
;;;197        TIMER_Start(TIMER3);
;;;198    }
000028  bd10              POP      {r4,pc}
;;;199    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0x40051020
                  |L7.48|
                          DCD      0xe000e100

                          AREA ||i.TMR2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR2_IRQHandler PROC
;;;199    
;;;200    void TMR2_IRQHandler(void)
000000  4806              LDR      r0,|L8.28|
000002  6881              LDR      r1,[r0,#8]
000004  07c9              LSLS     r1,r1,#31
000006  0fc9              LSRS     r1,r1,#31
;;;201    {
000008  d006              BEQ      |L8.24|
00000a  2101              MOVS     r1,#1
00000c  6081              STR      r1,[r0,#8]
;;;202        if(TIMER_GetIntFlag(TIMER2) == 1)
;;;203        {
;;;204            TIMER_ClearIntFlag(TIMER2);
;;;205    		set_flag(flag_RTC,ENABLE);		
00000e  4804              LDR      r0,|L8.32|
000010  2220              MOVS     r2,#0x20
000012  7801              LDRB     r1,[r0,#0]  ; BitFlag
000014  4311              ORRS     r1,r1,r2
000016  7001              STRB     r1,[r0,#0]
                  |L8.24|
;;;206        }
;;;207    }
000018  4770              BX       lr
;;;208    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x40051000
                  |L8.32|
                          DCD      ||.data||

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR3_IRQHandler PROC
;;;177    
;;;178    void TMR3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  4806              LDR      r0,|L9.28|
000004  6881              LDR      r1,[r0,#8]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
;;;179    {
00000a  d005              BEQ      |L9.24|
00000c  2101              MOVS     r1,#1
00000e  6081              STR      r1,[r0,#8]
;;;180    //	static uint32_t LOG = 0;
;;;181    //	static uint16_t CNT = 0;
;;;182    	
;;;183        if(TIMER_GetIntFlag(TIMER3) == 1)
;;;184        {
;;;185            TIMER_ClearIntFlag(TIMER3);
;;;186    		
;;;187    		timer_counter();		
000010  f7fffffe          BL       timer_counter
000014  f7fffffe          BL       loop_1ms
                  |L9.24|
;;;188    		loop();
;;;189        }
;;;190    }
000018  bd10              POP      {r4,pc}
;;;191    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40051020

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;217    
;;;218    void UART02_IRQHandler(void)
000000  4802              LDR      r0,|L10.12|
;;;219    {
;;;220    
;;;221    	if ((UART_GET_INT_FLAG(UART0,UART_INTSTS_RDAINT_Msk)))
000002  69c1              LDR      r1,[r0,#0x1c]
000004  05c9              LSLS     r1,r1,#23
000006  d400              BMI      |L10.10|
;;;222    	{
;;;223            /* UART receive data available flag */
;;;224     
;;;225    	}
;;;226        else if(UART_GET_INT_FLAG(UART0, UART_INTSTS_RXTOINT_Msk)) 
000008  69c0              LDR      r0,[r0,#0x1c]
                  |L10.10|
;;;227        {
;;;228     
;;;229        }	
;;;230    }
00000a  4770              BX       lr
;;;231    
                          ENDP

                  |L10.12|
                          DCD      0x40070000

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;231    
;;;232    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;233    {
;;;234        SYS_ResetModule(UART0_RST);
000002  481e              LDR      r0,|L11.124|
000004  f7fffffe          BL       SYS_ResetModule
;;;235    
;;;236        /* Configure UART0 and set UART0 baud rate */
;;;237        UART_Open(UART0, 115200);
000008  4c1d              LDR      r4,|L11.128|
00000a  21e1              MOVS     r1,#0xe1
00000c  0249              LSLS     r1,r1,#9
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Open
;;;238    
;;;239    	/* Set UART receive time-out */
;;;240    	UART_SetTimeoutCnt(UART0, 20);
000014  2114              MOVS     r1,#0x14
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_SetTimeoutCnt
;;;241    
;;;242    	/* Set UART FIFO RX interrupt trigger level to 4-bytes*/
;;;243        UART0->FIFO = ((UART0->FIFO & (~UART_FIFO_RFITL_Msk)) | UART_FIFO_RFITL_4BYTES);
00001c  68a0              LDR      r0,[r4,#8]
00001e  21f0              MOVS     r1,#0xf0
000020  4388              BICS     r0,r0,r1
000022  3010              ADDS     r0,r0,#0x10
000024  60a0              STR      r0,[r4,#8]
;;;244    
;;;245    	/* Enable UART Interrupt - */
;;;246    	UART_ENABLE_INT(UART0, UART_INTEN_RDAIEN_Msk | UART_INTEN_RXTOIEN_Msk);
000026  6860              LDR      r0,[r4,#4]
000028  2111              MOVS     r1,#0x11
00002a  4308              ORRS     r0,r0,r1
00002c  6060              STR      r0,[r4,#4]
00002e  2001              MOVS     r0,#1
000030  4914              LDR      r1,|L11.132|
000032  0300              LSLS     r0,r0,#12
000034  6008              STR      r0,[r1,#0]
;;;247    	
;;;248    	NVIC_EnableIRQ(UART02_IRQn);	
;;;249    
;;;250    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000036  f7fffffe          BL       CLK_GetCPUFreq
00003a  4601              MOV      r1,r0
00003c  a012              ADR      r0,|L11.136|
00003e  f7fffffe          BL       __2printf
;;;251    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000042  f7fffffe          BL       CLK_GetHXTFreq
000046  4601              MOV      r1,r0
000048  a016              ADR      r0,|L11.164|
00004a  f7fffffe          BL       __2printf
;;;252    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
00004e  f7fffffe          BL       CLK_GetLXTFreq
000052  4601              MOV      r1,r0
000054  a019              ADR      r0,|L11.188|
000056  f7fffffe          BL       __2printf
;;;253    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
00005a  f7fffffe          BL       CLK_GetPCLK0Freq
00005e  4601              MOV      r1,r0
000060  a01c              ADR      r0,|L11.212|
000062  f7fffffe          BL       __2printf
;;;254    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());
000066  f7fffffe          BL       CLK_GetPCLK1Freq
00006a  4601              MOV      r1,r0
00006c  a020              ADR      r0,|L11.240|
00006e  f7fffffe          BL       __2printf
                  |L11.114|
;;;255    
;;;256    
;;;257    	UART_WAIT_TX_EMPTY(UART0);
000072  69a0              LDR      r0,[r4,#0x18]
000074  00c0              LSLS     r0,r0,#3
000076  d5fc              BPL      |L11.114|
;;;258    }
000078  bd10              POP      {r4,pc}
;;;259    
                          ENDP

00007a  0000              DCW      0x0000
                  |L11.124|
                          DCD      0x04000010
                  |L11.128|
                          DCD      0x40070000
                  |L11.132|
                          DCD      0xe000e100
                  |L11.136|
000088  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
00008c  4b5f4765
000090  74435055
000094  46726571
000098  203a2025
00009c  38640d0a
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L11.164|
0000a4  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
0000a8  47657448
0000ac  58544672
0000b0  6571203a
0000b4  20253864
0000b8  0d0a00  
0000bb  00                DCB      0
                  |L11.188|
0000bc  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000c0  4765744c
0000c4  58544672
0000c8  6571203a
0000cc  20253864
0000d0  0d0a00  
0000d3  00                DCB      0
                  |L11.212|
0000d4  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000d8  47657450
0000dc  434c4b30
0000e0  46726571
0000e4  203a2025
0000e8  38640d0a
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L11.240|
0000f0  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000f4  47657450
0000f8  434c4b31
0000fc  46726571
000100  203a2025
000104  38640d0a
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0

                          AREA ||i.isLeapYear||, CODE, READONLY, ALIGN=1

                  isLeapYear PROC
;;;64     
;;;65     int isLeapYear(int year) 
000000  b510              PUSH     {r4,lr}
;;;66     {
;;;67     	return (year%400==0) || ((year%4==0) && (year%100!=0));
000002  21ff              MOVS     r1,#0xff
000004  4604              MOV      r4,r0                 ;66
000006  3191              ADDS     r1,r1,#0x91
000008  f7fffffe          BL       __aeabi_idivmod
00000c  2900              CMP      r1,#0
00000e  d007              BEQ      |L12.32|
000010  07a1              LSLS     r1,r4,#30
000012  d107              BNE      |L12.36|
000014  2164              MOVS     r1,#0x64
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       __aeabi_idivmod
00001c  2900              CMP      r1,#0
00001e  d001              BEQ      |L12.36|
                  |L12.32|
000020  2001              MOVS     r0,#1
;;;68     }
000022  bd10              POP      {r4,pc}
                  |L12.36|
000024  2000              MOVS     r0,#0                 ;67
000026  bd10              POP      {r4,pc}
;;;69     
                          ENDP


                          AREA ||i.loop||, CODE, READONLY, ALIGN=1

                  loop PROC
;;;145    
;;;146    void loop(void)
000000  b500              PUSH     {lr}
;;;147    {
;;;148    	loop_1ms();
000002  f7fffffe          BL       loop_1ms
;;;149    }
000006  bd00              POP      {pc}
;;;150    
                          ENDP


                          AREA ||i.loop_1ms||, CODE, READONLY, ALIGN=2

                  loop_1ms PROC
;;;126    
;;;127    void loop_1ms(void)
000000  490a              LDR      r1,|L14.44|
;;;128    {
;;;129    	static uint16_t CNT = 1;
;;;130    //	static uint16_t LOG = 0;
;;;131    
;;;132    	if (is_flag_set(flag_1ms))
000002  7808              LDRB     r0,[r1,#0]  ; BitFlag
000004  07c2              LSLS     r2,r0,#31
000006  d00f              BEQ      |L14.40|
;;;133    	{		
;;;134    		set_flag(flag_1ms,DISABLE);
000008  0840              LSRS     r0,r0,#1
00000a  0040              LSLS     r0,r0,#1
00000c  7008              STRB     r0,[r1,#0]
;;;135    		
;;;136    		if (CNT++ == (TIMER_1S/TIMER_1MS))
00000e  8948              LDRH     r0,[r1,#0xa]  ; CNT
000010  1c42              ADDS     r2,r0,#1
000012  814a              STRH     r2,[r1,#0xa]
000014  227d              MOVS     r2,#0x7d
000016  00d2              LSLS     r2,r2,#3
000018  4290              CMP      r0,r2
00001a  d105              BNE      |L14.40|
;;;137    		{
;;;138    			CNT = 1;
00001c  2001              MOVS     r0,#1
00001e  8148              STRH     r0,[r1,#0xa]
;;;139    //			printf("%s : %4d\r\n",__FUNCTION__,LOG++);
;;;140    
;;;141    			PB14 ^= 1;
000020  4903              LDR      r1,|L14.48|
000022  6b8a              LDR      r2,[r1,#0x38]
000024  4042              EORS     r2,r2,r0
000026  638a              STR      r2,[r1,#0x38]
                  |L14.40|
;;;142    		}		
;;;143    	}
;;;144    }
000028  4770              BX       lr
;;;145    
                          ENDP

00002a  0000              DCW      0x0000
                  |L14.44|
                          DCD      ||.data||
                  |L14.48|
                          DCD      0x40004840

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;307    
;;;308    int main()
000000  f7fffffe          BL       SYS_Init
;;;309    {
;;;310        SYS_Init();
;;;311    
;;;312        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;313    
;;;314    	GPIO_Init();
000008  f7fffffe          BL       GPIO_Init
;;;315    
;;;316    	TIMER2_Init();
00000c  f7fffffe          BL       TIMER2_Init
;;;317    
;;;318    	TIMER3_Init();
000010  f7fffffe          BL       TIMER3_Init
                  |L15.20|
;;;319    	
;;;320        /* Got no where to go, just loop forever */
;;;321        while(1)
;;;322        {
;;;323    
;;;324    		
;;;325    		RTC_Process();
000014  f7fffffe          BL       RTC_Process
000018  e7fc              B        |L15.20|
;;;326    		
;;;327        }
;;;328    }
;;;329    
                          ENDP


                          AREA ||i.timer_counter||, CODE, READONLY, ALIGN=2

                  timer_counter PROC
;;;150    
;;;151    void timer_counter(void)
000000  b570              PUSH     {r4-r6,lr}
;;;152    {
;;;153    	conter_1ms ++;
000002  4d1b              LDR      r5,|L16.112|
;;;154    	
;;;155    	set_flag(flag_1ms,ENABLE);
000004  2101              MOVS     r1,#1
000006  8928              LDRH     r0,[r5,#8]            ;153  ; conter_1ms
000008  1c40              ADDS     r0,r0,#1              ;153
00000a  b280              UXTH     r0,r0                 ;153
00000c  8128              STRH     r0,[r5,#8]            ;153
00000e  782c              LDRB     r4,[r5,#0]  ; BitFlag
000010  4606              MOV      r6,r0                 ;153
000012  430c              ORRS     r4,r4,r1
000014  702c              STRB     r4,[r5,#0]
;;;156    	
;;;157    	if(!(conter_1ms %TIMER_5MS)){
000016  2105              MOVS     r1,#5
000018  f7fffffe          BL       __aeabi_uidivmod
00001c  2900              CMP      r1,#0
00001e  d102              BNE      |L16.38|
;;;158    		set_flag(flag_5ms,ENABLE);}
000020  2002              MOVS     r0,#2
000022  4304              ORRS     r4,r4,r0
000024  702c              STRB     r4,[r5,#0]
                  |L16.38|
;;;159    	
;;;160    	if(!(conter_1ms %TIMER_10MS)){
000026  210a              MOVS     r1,#0xa
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       __aeabi_uidivmod
00002e  2900              CMP      r1,#0
000030  d103              BNE      |L16.58|
;;;161    		set_flag(flag_10ms,ENABLE);}
000032  7828              LDRB     r0,[r5,#0]  ; BitFlag
000034  2104              MOVS     r1,#4
000036  4308              ORRS     r0,r0,r1
000038  7028              STRB     r0,[r5,#0]
                  |L16.58|
;;;162    	
;;;163    	if(!(conter_1ms %TIMER_50MS)){
00003a  2132              MOVS     r1,#0x32
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  2900              CMP      r1,#0
000044  d103              BNE      |L16.78|
;;;164    		set_flag(flag_50ms,ENABLE);}
000046  7828              LDRB     r0,[r5,#0]  ; BitFlag
000048  2108              MOVS     r1,#8
00004a  4308              ORRS     r0,r0,r1
00004c  7028              STRB     r0,[r5,#0]
                  |L16.78|
;;;165    	
;;;166    	if(!(conter_1ms %TIMER_100MS)){
00004e  2164              MOVS     r1,#0x64
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       __aeabi_uidivmod
000056  2900              CMP      r1,#0
000058  d103              BNE      |L16.98|
;;;167    		set_flag(flag_100ms,ENABLE);}
00005a  7828              LDRB     r0,[r5,#0]  ; BitFlag
00005c  2110              MOVS     r1,#0x10
00005e  4308              ORRS     r0,r0,r1
000060  7028              STRB     r0,[r5,#0]
                  |L16.98|
;;;168    
;;;169    	if(conter_1ms >= 65500){
000062  4804              LDR      r0,|L16.116|
000064  4286              CMP      r6,r0
000066  d301              BCC      |L16.108|
;;;170    		conter_1ms = 0;}
000068  2000              MOVS     r0,#0
00006a  8128              STRH     r0,[r5,#8]
                  |L16.108|
;;;171    }
00006c  bd70              POP      {r4-r6,pc}
;;;172    
                          ENDP

00006e  0000              DCW      0x0000
                  |L16.112|
                          DCD      ||.data||
                  |L16.116|
                          DCD      0x0000ffdc

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x0000001f
                          DCD      0x0000001c
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f
                          DCD      0x0000001e
                          DCD      0x0000001f

                          AREA ||.data||, DATA, ALIGN=2

                  BitFlag
000000  00                DCB      0x00
                  g_month
000001  02                DCB      0x02
                  g_day
000002  1c                DCB      0x1c
                  g_weekly
000003  02                DCB      0x02
                  hour
000004  17                DCB      0x17
                  min
000005  3b                DCB      0x3b
                  ||sec||
000006  1e                DCB      0x1e
                  g_day_old
000007  00                DCB      0x00
                  conter_1ms
000008  0000              DCW      0x0000
                  ||CNT||
00000a  0001              DCW      0x0001
                  g_year
                          DCD      0x000007df

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_BitFlag____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REVSH|
#line 402
|__asm___6_main_c_BitFlag____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
