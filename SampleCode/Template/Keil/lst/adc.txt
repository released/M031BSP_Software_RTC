; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\adc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\adc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\adc.crf ..\..\..\Library\StdDriver\src\adc.c]
                          THUMB

                          AREA ||i.ADC_Close||, CODE, READONLY, ALIGN=1

                  ADC_Close PROC
;;;74       */
;;;75     void ADC_Close(ADC_T *adc)
000000  2001              MOVS     r0,#1
;;;76     {
;;;77         SYS->IPRST1 |= SYS_IPRST1_ADCRST_Msk;
000002  0780              LSLS     r0,r0,#30
000004  68c2              LDR      r2,[r0,#0xc]
000006  1081              ASRS     r1,r0,#2
000008  430a              ORRS     r2,r2,r1
00000a  60c2              STR      r2,[r0,#0xc]
;;;78         SYS->IPRST1 &= ~SYS_IPRST1_ADCRST_Msk;
00000c  68c2              LDR      r2,[r0,#0xc]
00000e  438a              BICS     r2,r2,r1
000010  60c2              STR      r2,[r0,#0xc]
;;;79         return;
;;;80     }
000012  4770              BX       lr
;;;81     
                          ENDP


                          AREA ||i.ADC_DisableHWTrigger||, CODE, READONLY, ALIGN=1

                  ADC_DisableHWTrigger PROC
;;;125      */
;;;126    void ADC_DisableHWTrigger(ADC_T *adc)
000000  3080              ADDS     r0,r0,#0x80
;;;127    {
;;;128        adc->ADCR &= ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk);
000002  6801              LDR      r1,[r0,#0]
000004  22ff              MOVS     r2,#0xff
000006  32f1              ADDS     r2,r2,#0xf1
000008  4391              BICS     r1,r1,r2
00000a  6001              STR      r1,[r0,#0]
;;;129        return;
;;;130    }
00000c  4770              BX       lr
;;;131    
                          ENDP


                          AREA ||i.ADC_DisableInt||, CODE, READONLY, ALIGN=1

                  ADC_DisableInt PROC
;;;165      */
;;;166    void ADC_DisableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;167    {
;;;168        if((u32Mask) & ADC_ADF_INT)
;;;169            adc->ADCR &= ~ADC_ADCR_ADIE_Msk;
000002  2202              MOVS     r2,#2
000004  3080              ADDS     r0,r0,#0x80
000006  2b00              CMP      r3,#0                 ;168
000008  d002              BEQ      |L3.16|
00000a  6803              LDR      r3,[r0,#0]
00000c  4393              BICS     r3,r3,r2
00000e  6003              STR      r3,[r0,#0]
                  |L3.16|
;;;170        if((u32Mask) & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L3.26|
;;;171            adc->ADCMPR[0] &= ~ADC_ADCMPR_CMPIE_Msk;
000014  6883              LDR      r3,[r0,#8]
000016  4393              BICS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
                  |L3.26|
;;;172        if((u32Mask) & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L3.36|
;;;173            adc->ADCMPR[1] &= ~ADC_ADCMPR_CMPIE_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  4391              BICS     r1,r1,r2
000022  60c1              STR      r1,[r0,#0xc]
                  |L3.36|
;;;174    
;;;175        return;
;;;176    }
000024  4770              BX       lr
;;;177    
                          ENDP


                          AREA ||i.ADC_EnableHWTrigger||, CODE, READONLY, ALIGN=1

                  ADC_EnableHWTrigger PROC
;;;98       */
;;;99     void ADC_EnableHWTrigger(ADC_T *adc,
000000  b530              PUSH     {r4,r5,lr}
;;;100                             uint32_t u32Source,
;;;101                             uint32_t u32Param)
;;;102    {
;;;103        if(u32Source == ADC_ADCR_TRGS_STADC)
;;;104        {
;;;105            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
000002  23ff              MOVS     r3,#0xff
000004  24ff              MOVS     r4,#0xff
000006  33f1              ADDS     r3,r3,#0xf1
000008  3401              ADDS     r4,#1
00000a  3080              ADDS     r0,r0,#0x80
00000c  2900              CMP      r1,#0                 ;103
00000e  d009              BEQ      |L4.36|
;;;106                        ((adc->ADCR) | (u32Source) | (u32Param) | ADC_ADCR_TRGEN_Msk);
;;;107        }
;;;108        else if(u32Source == ADC_ADCR_TRGS_TIMER)
000010  2910              CMP      r1,#0x10
000012  d00e              BEQ      |L4.50|
;;;109        {
;;;110            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
;;;111                        ((adc->ADCR) | (u32Source) | ADC_ADCR_TRGEN_Msk);
;;;112        }
;;;113        else
;;;114        {
;;;115            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
000014  6802              LDR      r2,[r0,#0]
000016  6805              LDR      r5,[r0,#0]
000018  4321              ORRS     r1,r1,r4
00001a  439d              BICS     r5,r5,r3
00001c  432a              ORRS     r2,r2,r5
00001e  430a              ORRS     r2,r2,r1
000020  6002              STR      r2,[r0,#0]
;;;116                        ((adc->ADCR) | (u32Source) | ADC_ADCR_TRGEN_Msk);
;;;117        }
;;;118        return;
;;;119    }
000022  bd30              POP      {r4,r5,pc}
                  |L4.36|
000024  6801              LDR      r1,[r0,#0]            ;105
000026  6805              LDR      r5,[r0,#0]            ;105
000028  439d              BICS     r5,r5,r3              ;105
00002a  4329              ORRS     r1,r1,r5              ;105
00002c  4311              ORRS     r1,r1,r2              ;105
00002e  4321              ORRS     r1,r1,r4              ;105
000030  e006              B        |L4.64|
                  |L4.50|
000032  6801              LDR      r1,[r0,#0]            ;110
000034  6802              LDR      r2,[r0,#0]            ;110
000036  439a              BICS     r2,r2,r3              ;110
000038  4311              ORRS     r1,r1,r2              ;110
00003a  22ff              MOVS     r2,#0xff              ;110
00003c  3211              ADDS     r2,r2,#0x11           ;110
00003e  4311              ORRS     r1,r1,r2              ;110
                  |L4.64|
000040  6001              STR      r1,[r0,#0]            ;105
000042  bd30              POP      {r4,r5,pc}
;;;120    
                          ENDP


                          AREA ||i.ADC_EnableInt||, CODE, READONLY, ALIGN=1

                  ADC_EnableInt PROC
;;;142      */
;;;143    void ADC_EnableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;144    {
;;;145        if((u32Mask) & ADC_ADF_INT)
;;;146            adc->ADCR |= ADC_ADCR_ADIE_Msk;
000002  2202              MOVS     r2,#2
000004  3080              ADDS     r0,r0,#0x80
000006  2b00              CMP      r3,#0                 ;145
000008  d002              BEQ      |L5.16|
00000a  6803              LDR      r3,[r0,#0]
00000c  4313              ORRS     r3,r3,r2
00000e  6003              STR      r3,[r0,#0]
                  |L5.16|
;;;147        if((u32Mask) & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L5.26|
;;;148            adc->ADCMPR[0] |= ADC_ADCMPR_CMPIE_Msk;
000014  6883              LDR      r3,[r0,#8]
000016  4313              ORRS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
                  |L5.26|
;;;149        if((u32Mask) & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L5.36|
;;;150            adc->ADCMPR[1] |= ADC_ADCMPR_CMPIE_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  4311              ORRS     r1,r1,r2
000022  60c1              STR      r1,[r0,#0xc]
                  |L5.36|
;;;151    
;;;152        return;
;;;153    }
000024  4770              BX       lr
;;;154    
                          ENDP


                          AREA ||i.ADC_Open||, CODE, READONLY, ALIGN=2

                  ADC_Open PROC
;;;42       */
;;;43     void ADC_Open(ADC_T *adc,
000000  b570              PUSH     {r4-r6,lr}
;;;44                   uint32_t u32InputMode,
;;;45                   uint32_t u32OpMode,
;;;46                   uint32_t u32ChMask)
;;;47     {
;;;48         /* Do calibration for ADC to decrease the effect of electrical random noise. */
;;;49         if ((adc->ADCALSTSR & ADC_ADCALSTSR_CALIF_Msk) == 0)
000002  4604              MOV      r4,r0
000004  34ff              ADDS     r4,r4,#0xff
000006  3481              ADDS     r4,r4,#0x81
000008  6865              LDR      r5,[r4,#4]
00000a  3080              ADDS     r0,r0,#0x80
00000c  07ed              LSLS     r5,r5,#31
00000e  2d00              CMP      r5,#0
000010  d115              BNE      |L6.62|
;;;50         {
;;;51             /* Must reset ADC before ADC calibration */
;;;52             adc->ADCR |= ADC_ADCR_RESET_Msk;
000012  6805              LDR      r5,[r0,#0]
000014  2601              MOVS     r6,#1
000016  0336              LSLS     r6,r6,#12
000018  4335              ORRS     r5,r5,r6
00001a  6005              STR      r5,[r0,#0]
                  |L6.28|
;;;53             while((adc->ADCR & ADC_ADCR_RESET_Msk) == ADC_ADCR_RESET_Msk);
00001c  6805              LDR      r5,[r0,#0]
00001e  04ed              LSLS     r5,r5,#19
000020  d4fc              BMI      |L6.28|
;;;54     
;;;55             adc->ADCALSTSR |= ADC_ADCALSTSR_CALIF_Msk;  /* Clear Calibration Finish Interrupt Flag */
000022  6865              LDR      r5,[r4,#4]
000024  2601              MOVS     r6,#1
000026  4335              ORRS     r5,r5,r6
000028  6065              STR      r5,[r4,#4]
;;;56             adc->ADCALR |= ADC_ADCALR_CALEN_Msk;        /* Enable Calibration function */
00002a  6825              LDR      r5,[r4,#0]
00002c  4335              ORRS     r5,r5,r6
00002e  6025              STR      r5,[r4,#0]
;;;57             ADC_START_CONV(adc);                        /* Start to calibration */
000030  6805              LDR      r5,[r0,#0]
000032  02f6              LSLS     r6,r6,#11
000034  4335              ORRS     r5,r5,r6
000036  6005              STR      r5,[r0,#0]
                  |L6.56|
;;;58             while((adc->ADCALSTSR & ADC_ADCALSTSR_CALIF_Msk) != ADC_ADCALSTSR_CALIF_Msk);   /* Wait calibration finish */
000038  6865              LDR      r5,[r4,#4]
00003a  07ed              LSLS     r5,r5,#31
00003c  d0fc              BEQ      |L6.56|
                  |L6.62|
;;;59         }
;;;60     
;;;61         adc->ADCR = (adc->ADCR & (~(ADC_ADCR_DIFFEN_Msk | ADC_ADCR_ADMD_Msk))) | \
00003e  6804              LDR      r4,[r0,#0]
000040  4d03              LDR      r5,|L6.80|
000042  402c              ANDS     r4,r4,r5
000044  430c              ORRS     r4,r4,r1
000046  4314              ORRS     r4,r4,r2
000048  6004              STR      r4,[r0,#0]
;;;62                     (u32InputMode) | \
;;;63                     (u32OpMode);
;;;64     
;;;65         adc->ADCHER = (adc->ADCHER & ~ADC_ADCHER_CHEN_Msk) | (u32ChMask);
00004a  6841              LDR      r1,[r0,#4]
00004c  6043              STR      r3,[r0,#4]
;;;66     
;;;67         return;
;;;68     }
00004e  bd70              POP      {r4-r6,pc}
;;;69     
                          ENDP

                  |L6.80|
                          DCD      0xfffffbf3

                          AREA ||i.ADC_SetExtendSampleTime||, CODE, READONLY, ALIGN=1

                  ADC_SetExtendSampleTime PROC
;;;186      */
;;;187    void ADC_SetExtendSampleTime(ADC_T *adc, uint32_t u32ModuleNum, uint32_t u32ExtendSampleTime)
000000  3080              ADDS     r0,r0,#0x80
;;;188    {
;;;189        adc->ESMPCTL = (adc->ESMPCTL & ~ADC_ESMPCTL_EXTSMPT_Msk) |
000002  6a01              LDR      r1,[r0,#0x20]
000004  0a09              LSRS     r1,r1,#8
000006  0209              LSLS     r1,r1,#8
000008  4311              ORRS     r1,r1,r2
00000a  6201              STR      r1,[r0,#0x20]
;;;190                       (u32ExtendSampleTime << ADC_ESMPCTL_EXTSMPT_Pos);
;;;191    }
00000c  4770              BX       lr
;;;192    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_adc_c_ADC_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REVSH|
#line 402
|__asm___5_adc_c_ADC_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
